version: "3.8"

volumes:
  app-mysql-data:
    name: "${APP_NAME:-app}-mysql-data"
    driver: local

networks:
  app:
    name: "${APP_NAME:-app}-network"
    driver: bridge

services:
  nginx:
    build:
      context: .
      dockerfile: .docker/nginx.dockerfile
    container_name: "nginx-${APP_NAME:-app}"
    depends_on:
      - php
      - mysql
    volumes:
      - .:/var/www/html
    ports:
      - "${APP_PORT:-80}:80"
    networks:
      - app
  php:
    build:
      context: .
      dockerfile: .docker/php.dockerfile
    container_name: "php-${APP_NAME:-app}"
    volumes:
      - .:/var/www/html
    networks:
      - app
  mysql:
    image: mysql:8.0
    container_name: "mysql-${APP_NAME:-app}"
    ports:
      - "${FORWARD_DB_PORT:-3706}:3306"
    environment:
      MYSQL_ROOT_PASSWORD: "${DB_PASSWORD:-secret}"
      MYSQL_DATABASE: "${DB_DATABASE:-app}"
      MYSQL_USER: "${DB_USERNAME:-app}"
      MYSQL_PASSWORD: "${DB_PASSWORD:-secret}"
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    volumes:
      - app-mysql-data:/var/lib/mysql
    networks:
      - app
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-p${DB_PASSWORD}" ]
      retries: 3
      timeout: 5s
  composer:
    build:
      context: .
      dockerfile: .docker/php.dockerfile
    container_name: "composer-${APP_NAME:-app}"
    entrypoint: [ "composer" ]
    volumes:
      - .:/var/www/html
    networks:
      - app
  migrations:
    build:
      context: .
      dockerfile: .docker/php.dockerfile
    container_name: "migrations-${APP_NAME:-app}"
    entrypoint: [ "./vendor/bin/doctrine-migrations" ]
    volumes:
      - .:/var/www/html
    networks:
      - app
  phpunit:
    build:
      context: .
      dockerfile: .docker/php.dockerfile
    container_name: "phpunit-${APP_NAME:-app}"
    entrypoint: [ "./vendor/bin/phpunit" ]
    volumes:
      - .:/var/www/html
    networks:
      - app

